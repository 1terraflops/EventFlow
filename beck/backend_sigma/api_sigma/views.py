from rest_framework import status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.decorators import api_view,  permission_classes
from django.contrib.auth.models import User
from django.contrib.auth import authenticate
from django.core.mail import send_mail
from rest_framework_simplejwt.tokens import RefreshToken
from .models import Event, EventRegistration
from .serializers import EventSerializer, EventRegistrationSerializer
from .models import EventRegistration

@api_view(["POST"])
def register(request):
    username = request.data.get("username")
    password = request.data.get("password")

    if not username or not password:
        return Response({"error": "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è"}, status=status.HTTP_400_BAD_REQUEST)

    if User.objects.filter(username=username).exists():
        return Response({"error": "–¢–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î"}, status=status.HTTP_400_BAD_REQUEST)

    user = User.objects.create_user(username=username, password=password)
    refresh = RefreshToken.for_user(user)

    return Response({
        "refresh": str(refresh),
        "access": str(refresh.access_token),
    }, status=status.HTTP_201_CREATED)


@api_view(["POST"])
def login(request):
    username = request.data.get("username")
    password = request.data.get("password")

    if not username or not password:
        return Response({"error": "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è"}, status=status.HTTP_400_BAD_REQUEST)

    user = authenticate(username=username, password=password)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–∞—Ä–æ–ª—å

    if user is None:
        return Response({"error": "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å"}, status=status.HTTP_401_UNAUTHORIZED)

    refresh = RefreshToken.for_user(user)

    return Response({
        "refresh": str(refresh),
        "access": str(refresh.access_token),
    })


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≤–µ–Ω—Ç—É (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∞–±–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä)
@api_view(["POST"])
@permission_classes([IsAuthenticated])
def create_event(request):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–æ–º (is_staff) –∞–±–æ —Å—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (is_superuser)
    if not request.user.is_staff and not request.user.is_superuser: 
        return Response({"error": "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —ñ–≤–µ–Ω—Ç–∏"}, status=status.HTTP_403_FORBIDDEN)
    
    data = request.data.copy()
    data["created_by"] = request.user.id  # –ü–µ—Ä–µ–¥–∞—î–º–æ ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ —é–∑–µ—Ä–∞, —Ç–æ–π –∫–æ—Ç—Ä–∏–π —Å—Ç–≤–æ—Ä—é—î.

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≤–µ–Ω—Ç—É.
    serializer = EventSerializer(data=data)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–≤–µ–Ω—Ç—ñ–≤
@api_view(["GET"])
def event_list(request):
    events = Event.objects.all()
    serializer = EventSerializer(events, many=True)
    return Response(serializer.data)

# –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–∏–Ω —ñ–≤–µ–Ω—Ç
@api_view(["GET"])
def event_detail(request, event_id):
    try:
        event = Event.objects.get(id=event_id)
        serializer = EventSerializer(event)
        return Response(serializer.data)
    except Event.DoesNotExist:
        return Response({"error": "–Ü–≤–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, status=status.HTTP_404_NOT_FOUND)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ —ñ–≤–µ–Ω—Ç
@api_view(["POST"])
@permission_classes([IsAuthenticated])
def register_for_event(request, event_id):
    try:
        event = Event.objects.get(id=event_id)
    except Event.DoesNotExist:
        return Response({"error": "–Ü–≤–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, status=status.HTTP_404_NOT_FOUND)

    email = request.data.get("email")
    if not email:
        return Response({"error": "–í–∫–∞–∂—ñ—Ç—å email"}, status=status.HTTP_400_BAD_REQUEST)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —Ü–µ–π —ñ–≤–µ–Ω—Ç
    if EventRegistration.objects.filter(event=event, user=request.user).exists():
        return Response({"error": "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü–µ–π —ñ–≤–µ–Ω—Ç"}, status=status.HTTP_400_BAD_REQUEST)

    registration = EventRegistration.objects.create(event=event, user=request.user, email=email)

    # üì© –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email
    send_mail(
        subject=f"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ {event.title}",
        message=f"–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å –Ω–∞ —ñ–≤–µ–Ω—Ç {event.title}, —è–∫–∏–π –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è {event.start_date}.",
        from_email="noreply.sigma@xcdto.xyz",
        recipient_list=[email],
        fail_silently=False,
    )

    return Response({"message": "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!", "registration_id": registration.id})

# –•—Ç–æ –∑–∞—Ä—î–µ—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —ñ–≤–µ–Ω—Ç
@api_view(['GET'])
def get_registered_users(request, event_id):
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ —ñ–≤–µ–Ω—Ç–æ–º
    registrations = EventRegistration.objects.filter(event_id=event_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ñ–Ω—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    data = [
        {
            'user_id': registration.user.id,  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            'registered_at': registration.registered_at  # –ß–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        }
        for registration in registrations
    ]

    return Response(data)

# –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_user_info(request, user_id):
    try:
        user = User.objects.get(id=user_id)
    except User.DoesNotExist:
        return Response({"error": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, status=status.HTTP_404_NOT_FOUND)

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    data = {
        'user_id': user.id,
        'username': user.username,
        #'email': user.email,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'is_active': user.is_active,
        'is_staff': user.is_staff,
        'date_joined': user.date_joined,
        #'last_login': user.last_login
    }

    return Response(data)

